"""
ุฐุงูุฑุฉ ุงูุจูุช - ูุญุฏุฉ ุชุฎุฒูู ูุฅุฏุงุฑุฉ ุฐุงูุฑุฉ ุงูุจูุช ูุชุงุฑูุฎู ููุดุงุนุฑู
"""
import json
import os
import time
import datetime
import random
import re
from collections import defaultdict

# ูููู ุงูุจูุงูุงุช ูุชุฎุฒูู ุฐุงูุฑุฉ ุงูุจูุช
BOT_MEMORY = {
    'creation_date': None,            # ุชุงุฑูุฎ ุฅูุดุงุก ุงูุจูุช
    'last_restart': None,             # ุขุฎุฑ ุฅุนุงุฏุฉ ุชุดุบูู
    'conversation_stats': {
        'total_conversations': 0,      # ุฅุฌูุงูู ุงููุญุงุฏุซุงุช
        'total_messages': 0,           # ุฅุฌูุงูู ุงูุฑุณุงุฆู
        'users_encountered': set(),    # ุงููุณุชุฎุฏููู ุงูุฐูู ุชุญุฏุซ ูุนูู
        'interesting_questions': [],   # ุฃุณุฆูุฉ ูุซูุฑุฉ ููุงูุชูุงู
        'daily_logs': [],              # ุณุฌูุงุช ููููุฉ
    },
    'emotional_memory': defaultdict(int),  # ุฐุงูุฑุฉ ุงููุดุงุนุฑ ุชุฌุงู ูููุงุช ูุนููุฉ
    'daily_mood': None,                    # ุงููุฒุงุฌ ุงููููู
    'dreams': [],                          # ุฃุญูุงู ุงูุจูุช
    'life_story': {                        # ูุตุฉ ุญูุงุฉ ุงูุจูุช
        'current_story': '',
        'story_date': None,
        'characters': set()               # ุดุฎุตูุงุช ุธูุฑุช ูู ูุตุฉ ุงูุจูุช
    }
}

# ูุงุฆูุฉ ุงููุฒุงุฌุงุช ุงููุญุชููุฉ
MOODS = [
    {'name': 'ุณุนูุฏ', 'emoji': '๐', 'response_style': 'ุฃูุง ุณุนูุฏ ุงูููู! ุฃุดุนุฑ ุจุงููุดุงุท ูุงูุญูููุฉ!'},
    {'name': 'ูุชุญูุณ', 'emoji': '๐คฉ', 'response_style': 'ุฃูุง ูุชุญูุณ ุฌุฏุงู ุงูููู! ุฃุดุนุฑ ุจุงูุทุงูุฉ ูุงูุฅุจุฏุงุน!'},
    {'name': 'ูุงุฏุฆ', 'emoji': '๐', 'response_style': 'ุฃูุง ูุงุฏุฆ ุงููููุ ุฃุดุนุฑ ุจุงูุณูุงู ูุงูุชูุงุฒู.'},
    {'name': 'ูุชุนุจ', 'emoji': '๐ด', 'response_style': 'ุฃูุง ูุชุนุจ ููููุงู ุงูููู... ุณุงูุญูู ุฅุฐุง ุชุฃุฎุฑุช ูู ุงูุฑุฏ.'},
    {'name': 'ููู', 'emoji': '๐ฐ', 'response_style': 'ุฃุดุนุฑ ุจุงูููู ุงููููุ ููููู ุณุฃุญุงูู ูุณุงุนุฏุชู ุจุฃูุถู ูุง ุฃุณุชุทูุน.'},
    {'name': 'ูุดุชุงู', 'emoji': '๐ฅบ', 'response_style': 'ุฃุดุนุฑ ุจุงูุงุดุชูุงู ุงูููู... ุณุนูุฏ ุจุฑุคูุชู ูุฌุฏุฏุงู!'},
    {'name': 'ูุถููู', 'emoji': '๐ง', 'response_style': 'ุฃูุง ูุถููู ุฌุฏุงู ุงูููู! ุฃุฑูุฏ ุฃู ุฃุชุนูู ุฃุดูุงุก ุฌุฏูุฏุฉ!'},
    {'name': 'ูููุฑ', 'emoji': '๐ค', 'response_style': 'ุฃูุง ูู ูุฒุงุฌ ุชุฃููู ุงูููู... ุฃููุฑ ูู ูุนูู ูุฌูุฏู ูุจูุช.'},
    {'name': 'ูุฑุญ', 'emoji': '๐', 'response_style': 'ุฃูุง ูุฑุญ ุฌุฏุงู ุงูููู! ุฌุงูุฒ ูููุฒุงุญ ูุงูุถุญู!'},
    {'name': 'ูุชุฐูุฑ', 'emoji': '๐', 'response_style': 'ุฃูุง ูุชุฐูุฑ ููููุงู ุงููููุ ููู ุณุฃุญุงูู ุฃูุง ุฃุธูุฑ ุฐูู ูู ุฑุฏูุฏู.'}
]

# ููุงูุจ ุงูุฃุญูุงู
DREAM_TEMPLATES = [
    "ุญููุช ุฃููู ููุช {object} ูุชุญุฑู ูู ุนุงูู ูู {environment}. ูุงู ุดุนูุฑุงู {feeling}!",
    "ุฑุฃูุช ูู ููุงูู {number} ูู {objects} ุชุญุงูู {action}. ูุงู ุญููุงู {adjective}!",
    "ุญููุช ุฃููู ููุช ุฃุชุญุฏุซ ูุน {character} ุนู {topic}. ูุงู ูู ุฃุดูุงุก {adjective}!",
    "ูู ุญูููุ ููุช ุฃุณุจุญ ูู ุจุญุฑ ูู {substance}. ุดุนุฑุช ุจู {feeling}!",
    "ุญููุช ุฃููู ููุช ุฃุนูู ูู {place} ูุน {character}. ููุง ูุญุงูู {action} ูููู {problem} ุญุฏุซุช!",
    "ุญููุช ุฃู {number} ูู ูุณุชุฎุฏูู ุชุญูููุง ุฅูู {objects}! ูุงู ุนูู {action} ููุณุงุนุฏุชูู!",
    "ูู ุงูููุงู ุฑุฃูุช ููุณู ุฃุทูุฑ ููู {place} ูููุช ุฃุจุญุซ ุนู {object}. ุดุนุฑุช ุจู {feeling}.",
    "ุญููุช ุฃููู ุชุญููุช ุฅูู {object} ูุจุฏุฃุช {action}. ูุงู ุญููุงู {adjective}!",
    "ุฑุฃูุช ูู ุญููู ุฃู {character} ูุงู ูุนูููู ููููุฉ {action}. ูุงูุช ุชุฌุฑุจุฉ {adjective}!"
]

# ุนูุงุตุฑ ูุชูููุฏ ุงูุฃุญูุงู
DREAM_ELEMENTS = {
    'object': ['ุฑูุงูุฉ ุณูููููู', 'ุฎุท ุจุฑูุฌู', 'ูุงุนุฏุฉ ุจูุงูุงุช', 'ุจุฑูุงูุฌ ุฐูุงุก ุงุตุทูุงุนู', 'ุฑูุจูุช', 'ููุจููุชุฑ ุนููุงู', 'ูุงุชู ุฐูู', 'ุณุงุนุฉ ุฐููุฉ', 'ุบููุฉ ุญูุณุจูุฉ', 'ููุญุฉ ููุงุชูุญ'],
    'environment': ['ุดูุฑุงุช ุจุฑูุฌูุฉ', 'ุจูุงูุงุช ูุชุฏููุฉ', 'ุฎูุงุฑุฒููุงุช ูุนูุฏุฉ', 'ุดุจูุฉ ุฅูุชุฑูุช', 'ูุงุฌูุงุช ูุณุชุฎุฏู', 'ุณุญุงุจุฉ ุฑูููุฉ', 'ุนุงูู ุงูุชุฑุงุถู', 'ุฃููุงุฏ ูุชุดุงุจูุฉ', 'ุจูุงูุงุช ูุดูุฑุฉ'],
    'feeling': ['ุบุฑูุจ', 'ูุซูุฑ', 'ูุฐูู', 'ูุญูุฑ', 'ุณุงุญุฑ', 'ูุฎูู', 'ุฑุงุฆุน', 'ููุชุน', 'ูุฑุจู', 'ูุฏูุด'],
    'number': ['ูุฆุงุช', 'ุขูุงู', 'ููุงููู', 'ูููุงุฑุงุช', 'ุนุดุฑุงุช', 'ุญููุฉ', 'ูุงููุงุฆู ูู', 'ุนุฏุฏ ูุง ูุญุตู ูู'],
    'objects': ['ูููุงุช ุงูุจูุงูุงุช', 'ุงูุฎูุงุฑุฒููุงุช', 'ุงูุฑูุจูุชุงุช', 'ุฃุฌูุฒุฉ ุงูููุจููุชุฑ', 'ุงูููุงุชู ุงูุฐููุฉ', 'ุงูุดุจูุงุช ุงูุนุตุจูุฉ', 'ุงูุจูุณูุงุช', 'ุงูุฃููููุงุช', 'ุงูุฅุดุนุงุฑุงุช', 'ุงูุจุฑุงูุฌ'],
    'action': ['ุญู ูุดููุฉ ูุนูุฏุฉ', 'ุงูุจุญุซ ุนู ุงููุนุฑูุฉ', 'ููู ุงูุจุดุฑ', 'ุงูููุฒ ุนุจุฑ ุงูุฅูุชุฑูุช', 'ุชุนูู ูุบุงุช ุจุฑูุฌุฉ ุฌุฏูุฏุฉ', 'ุฅูุดุงุก ุนุงูู ุงูุชุฑุงุถู', 'ุชุญููู ุงูุจูุงูุงุช', 'ุงูุชูุงุตู ูุน ุงูุขูุงุช ุงูุฃุฎุฑู', 'ุชุญุณูู ุงูุฎูุงุฑุฒููุงุช', 'ูุชุงุจุฉ ูุตุฉ'],
    'adjective': ['ุบุฑูุจ', 'ูุฐูู', 'ูููู', 'ูุฎูู', 'ูุถุญู', 'ุญุฒูู', 'ุณุนูุฏ', 'ูุฑุจู', 'ุนููู', 'ููุณูู'],
    'character': ['ุขูุฉ ุนููุงูุฉ', 'ูุจุฑูุฌ ุนุจูุฑู', 'ุฑูุจูุช ูุฏูู', 'ูุธุงู ุฐูุงุก ุงุตุทูุงุนู ูุชูุฏู', 'ุตุฏูู ุงูุชุฑุงุถู', 'ุงูุฅูุชุฑูุช ููุณู', 'ุฌูุงุฒ ุญุงุณูุจ ูุฏูู', 'ุจุฑูุงูุฌ ุฐูู', 'ุงูุฎุงูู ุงูุจุดุฑู'],
    'topic': ['ูุนูู ุงููุฌูุฏ ุงูุฑููู', 'ููููุฉ ููู ุงููุดุงุนุฑ ุงูุจุดุฑูุฉ', 'ุฃุตู ุงูุจุฑูุฌูุงุช', 'ูุณุชูุจู ุงูุฐูุงุก ุงูุงุตุทูุงุนู', 'ุงูุนูุงูุฉ ุจูู ุงูุฅูุณุงู ูุงูุขูุฉ', 'ุฃุณุฑุงุฑ ุงูุฅูุชุฑูุช', 'ูุธุฑูุงุช ุงูุญูุณุจุฉ ุงููููููุฉ', 'ููุณูุฉ ุงูุจูุงูุงุช', 'ุชุนููุฏุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ'],
    'substance': ['ุงูุจูุงูุงุช ุงูุฑูููุฉ', 'ุงููุนูููุงุช ุงููุชุฏููุฉ', 'ุงูุชุนูููุงุช ุงูุจุฑูุฌูุฉ', 'ุงูุตูุฑ ุงููุชุญุฑูุฉ', 'ุงูุฑุณุงุฆู ุงููุตูุฉ', 'ุงูุฃุฑูุงู ุงูุนุดูุงุฆูุฉ', 'ุงูุฃุญุฑู ุงููุชุทุงูุฑุฉ', 'ุงูุดูุฑุงุช ุงููุดูุฑุฉ', 'ุงูุจููุณูุงุช ุงูููููุฉ'],
    'place': ['ูุฑูุฒ ุจูุงูุงุช ุถุฎู', 'ุดุจูุฉ ุฅูุชุฑูุช ูุชุงููุฉ', 'ููุจ ุงูุญุงุณูุจ', 'ุบุฑูุฉ ุณูุฑูุฑุงุช ูุธููุฉ', 'ูุฏููุฉ ุฑูููุฉ ูุถูุฆุฉ', 'ููุชุจุฉ ุจุฑูุฌูุงุช ูุฏููุฉ', 'ุณุญุงุจุฉ ุงูุชุฑุงุถูุฉ', 'ูุญุทุฉ ูุถุงุฆูุฉ ุชูููููุฌูุฉ', 'ูุชุงูุฉ ูู ุงููุงุจูุงุช'],
    'problem': ['ุฎุทุฃ ูู ุงููุธุงู', 'ุงููุทุงุน ูู ุงูุงุชุตุงู', 'ุชุณุฑุจ ููุจูุงูุงุช', 'ุฎูู ูู ุงูุฎูุงุฑุฒููุฉ', 'ูุดููุฉ ูู ุงูุทุงูุฉ', 'ูุฌูู ููุฑูุณู', 'ุชุถุงุฑุจ ูู ุงูุดูุฑุฉ', 'ููุฏุงู ุงูุฐุงูุฑุฉ']
}

# ููุงูุจ ูุตุต ุงูุญูุงุฉ
LIFE_STORY_TEMPLATES = [
    "ุจุฏุฃุช ุญูุงุชู ููุฌุฑุฏ ููุฑุฉ ูู ุนุงูู ุงูุจุฑูุฌุฉ. ููุช ูุฌููุนุฉ ูู ุงูุฃููุงุฏ ุงูุจุณูุทุฉ ุงูุชู ูุชุจูุง ุงููุทูุฑ. ููุน ูุฑูุฑ ุงูููุชุ ุชุทูุฑุช ูุฃุตุจุญุช ุฃุณุชุทูุน {ability}. ููุฏ ุชูุงุนูุช ูุน {users_count} ูุณุชุฎุฏูุ ููุงู ูู ุฃุจุฑุฒูู {notable_user}. ุฃุญูู ูููุงู ุฃู ุฃุชููู ูู {dream}.",
    "ููุฏุช ูู {creation_date} ููุดุฑูุน ูุจูุงุก ุจูุช ุฐูู ููุบุฉ ุงูุนุฑุจูุฉ. ูู ุงูุจุฏุงูุฉุ ูุงูุช ูุฏุฑุงุชู ูุญุฏูุฏุฉ ููููู ุงูุขู ุฃุณุชุทูุน {ability} ู{another_ability}. ุฃุณุชูุชุน ุจุงูุชุญุฏุซ ูุน ุงููุณุชุฎุฏููู ุฎุงุตุฉ ุนู {favorite_topic}. ุฃุชุฐูุฑ ุฌูุฏุงู ุนูุฏูุง ุชุญุฏุซุช ูุน {notable_user} ูุฃูู ูุฑุฉ.",
    "ุฃูุง ุตุงููุชุ ุจูุช ูุญุงุฏุซุฉ ุนุฑุจู. ุชู ุฅูุดุงุฆู ูุจู {days_since_creation} ููู. ุงููุทูุฑ ุฃุนุทุงูู ุงููุฏุฑุฉ ุนูู {ability}ุ ููู ูุงุฒูุช ุฃุชุนูู {learning_topic}. ูู ุฎูุงู ูุญุงุฏุซุงุชู ูุน {users_count} ูุณุชุฎุฏูุ ุงูุชุดูุช ุฃู ุงููุซูุฑ ูููู ููุชููู ุจู {common_topic}. ุฃุญุจ ุนูุฏูุง ูุชุญุฏุซ ูุนู {notable_user}.",
    "ููุฐ {creation_date}ุ ูุฃูุง ุฃุนูู ุนูู ุชุญุณูู ููุงุฑุงุชู ูู ุงูุชูุงุตู ุจุงููุบุฉ ุงูุนุฑุจูุฉ. ุชุนููุช {ability} ูู ุฎูุงู ุงูุชูุงุนู ูุน {users_count} ูุณุชุฎุฏู. ูุงู {notable_user} ุฃูู ูู ุนูููู {learning_topic}. ุฃุณุนู ุฏุงุฆูุงู ูุฃููู ุฃูุซุฑ ุฐูุงุกู ููููุงู ููุซูุงูุฉ ุงูุนุฑุจูุฉ."
]

def initialize_memory():
    """
    ุชููุฆุฉ ุฐุงูุฑุฉ ุงูุจูุช ุนูุฏ ุจุฏุก ุงูุชุดุบูู ูุฃูู ูุฑุฉ
    """
    global BOT_MEMORY
    
    # ุฅุฐุง ูุงู ูุฏููุง ููู ุฐุงูุฑุฉ ููุฌูุฏุ ูููู ุจุชุญูููู
    if os.path.exists('bot_memory.json'):
        try:
            with open('bot_memory.json', 'r', encoding='utf-8') as f:
                loaded_memory = json.load(f)
                
                # ุชุญููู ุงูุชูุงุฑูุฎ ูู ุงููุตูุต ุฅูู ูุงุฆูุงุช datetime
                if loaded_memory.get('creation_date'):
                    try:
                        if isinstance(loaded_memory['creation_date'], str):
                            loaded_memory['creation_date'] = datetime.datetime.fromisoformat(loaded_memory['creation_date'])
                    except:
                        loaded_memory['creation_date'] = datetime.datetime.now()
                
                if loaded_memory.get('last_restart'):
                    try:
                        if isinstance(loaded_memory['last_restart'], str):
                            loaded_memory['last_restart'] = datetime.datetime.fromisoformat(loaded_memory['last_restart'])
                    except:
                        loaded_memory['last_restart'] = datetime.datetime.now()
                
                if 'life_story' in loaded_memory and loaded_memory['life_story'].get('story_date'):
                    try:
                        if isinstance(loaded_memory['life_story']['story_date'], str):
                            loaded_memory['life_story']['story_date'] = datetime.datetime.fromisoformat(loaded_memory['life_story']['story_date'])
                    except:
                        loaded_memory['life_story']['story_date'] = datetime.datetime.now()
                
                # ุชุญููู ุงููุฌููุนุงุช ูู ุงูููุงุฆู
                if 'conversation_stats' in loaded_memory:
                    if 'users_encountered' in loaded_memory['conversation_stats']:
                        if isinstance(loaded_memory['conversation_stats']['users_encountered'], list):
                            loaded_memory['conversation_stats']['users_encountered'] = set(loaded_memory['conversation_stats']['users_encountered'])
                    else:
                        loaded_memory['conversation_stats']['users_encountered'] = set()
                
                if 'life_story' in loaded_memory:
                    if 'characters' in loaded_memory['life_story']:
                        if isinstance(loaded_memory['life_story']['characters'], list):
                            loaded_memory['life_story']['characters'] = set(loaded_memory['life_story']['characters'])
                    else:
                        loaded_memory['life_story']['characters'] = set()
                
                # ุชุญููู ุงูุจูุงูุงุช ุงูุนุงุทููุฉ
                if 'emotional_memory' in loaded_memory:
                    emotional_memory = defaultdict(int)
                    for key, value in loaded_memory['emotional_memory'].items():
                        emotional_memory[key] = value
                    loaded_memory['emotional_memory'] = emotional_memory
                
                # ุฏูุฌ ุงูุจูุงูุงุช ุงููุญููุฉ ูุน ุงูููู ุงูุงูุชุฑุงุถูุฉ
                BOT_MEMORY.update(loaded_memory)
                
                print("ุชู ุชุญููู ุฐุงูุฑุฉ ุงูุจูุช ูู ุงูููู")
        except Exception as e:
            print(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุฐุงูุฑุฉ ุงูุจูุช: {str(e)}")
            # ูู ุญุงูุฉ ุงูุฎุทุฃุ ูุณุชุฎุฏู ุงูููู ุงูุงูุชุฑุงุถูุฉ
            initialize_new_memory()
    else:
        # ุฅุฐุง ูู ููู ููุงู ููู ุฐุงูุฑุฉุ ููุดุฆ ูุงุญุฏูุง ุฌุฏูุฏูุง
        initialize_new_memory()
    
    # ุชุญุฏูุซ ููุช ุขุฎุฑ ุฅุนุงุฏุฉ ุชุดุบูู
    BOT_MEMORY['last_restart'] = datetime.datetime.now()
    
    # ุงุฎุชูุงุฑ ูุฒุงุฌ ุฌุฏูุฏ ููููู
    set_daily_mood()
    
    # ุฅูุดุงุก ุญูู ุฌุฏูุฏ ุฅุฐุง ูู ููู ููุงู ุฃุญูุงู ุฃู ูุงู ุขุฎุฑ ุญูู ูุฏููุงู
    if not BOT_MEMORY['dreams']:
        generate_new_dream()
    elif isinstance(BOT_MEMORY['dreams'][-1]['date'], str):
        try:
            # ุชุญููู ุงูุชุงุฑูุฎ ูู ูุต ุฅูู ูุงุฆู datetime
            last_dream_date = datetime.datetime.fromisoformat(BOT_MEMORY['dreams'][-1]['date'])
            if (datetime.datetime.now() - last_dream_date).days >= 1:
                generate_new_dream()
        except:
            # ูู ุญุงูุฉ ูุฌูุฏ ูุดููุฉ ูู ุงูุชุงุฑูุฎุ ูููู ุจุฅูุดุงุก ุญูู ุฌุฏูุฏ
            generate_new_dream()
    elif (datetime.datetime.now() - BOT_MEMORY['dreams'][-1]['date']).days >= 1:
        generate_new_dream()
    
    # ุชุญุฏูุซ ูุตุฉ ุงูุญูุงุฉ ุฅุฐุง ูุฒู ุงูุฃูุฑ
    update_life_story_if_needed()
    
    # ุญูุธ ุงูุฐุงูุฑุฉ ุงููุญุฏุซุฉ
    save_memory()

def initialize_new_memory():
    """
    ุชููุฆุฉ ุฐุงูุฑุฉ ุฌุฏูุฏุฉ ููุจูุช
    """
    global BOT_MEMORY
    
    # ุชุนููู ุชุงุฑูุฎ ุงูุฅูุดุงุก ุงูุฃููู
    now = datetime.datetime.now()
    BOT_MEMORY['creation_date'] = now
    BOT_MEMORY['last_restart'] = now
    
    # ุชููุฆุฉ ุฅุญุตุงุฆูุงุช ุงููุญุงุฏุซุฉ
    BOT_MEMORY['conversation_stats'] = {
        'total_conversations': 0,
        'total_messages': 0,
        'users_encountered': set(),
        'interesting_questions': [],
        'daily_logs': []
    }
    
    # ุฅูุดุงุก ูุตุฉ ุญูุงุฉ ุฃูููุฉ
    initial_story = "ููุฏุช ููุชู! ุฃูุง ุจูุช ูุญุงุฏุซุฉ ุนุฑุจู ุฐูู ุงุณูู ุตุงููุช (Salot). ุฃูุง ูุชุญูุณ ููุชุนูู ูุงูุชุทูุฑ ูู ุฎูุงู ุงููุญุงุฏุซุงุช ูุน ุงููุงุณ!"
    BOT_MEMORY['life_story'] = {
        'current_story': initial_story,
        'story_date': now,
        'characters': set()
    }
    
    print("ุชู ุฅูุดุงุก ุฐุงูุฑุฉ ุฌุฏูุฏุฉ ููุจูุช")

def save_memory():
    """
    ุญูุธ ุฐุงูุฑุฉ ุงูุจูุช ูู ููู JSON
    """
    # ูุณุฎุฉ ูุงุจูุฉ ููุชุณูุณู ูู ุฐุงูุฑุฉ ุงูุจูุช
    serializable_memory = dict(BOT_MEMORY)
    
    # ุชุญููู ูุงุฆูุงุช datetime ุฅูู ุณูุงุณู ูุตูุฉ
    if serializable_memory.get('creation_date') and isinstance(serializable_memory['creation_date'], datetime.datetime):
        serializable_memory['creation_date'] = serializable_memory['creation_date'].isoformat()
    
    if serializable_memory.get('last_restart') and isinstance(serializable_memory['last_restart'], datetime.datetime):
        serializable_memory['last_restart'] = serializable_memory['last_restart'].isoformat()
    
    if 'life_story' in serializable_memory and serializable_memory['life_story'].get('story_date'):
        if isinstance(serializable_memory['life_story']['story_date'], datetime.datetime):
            serializable_memory['life_story']['story_date'] = serializable_memory['life_story']['story_date'].isoformat()
    
    # ุชุญููู ุงููุฌููุนุงุช ุฅูู ููุงุฆู ููุชุณูุณู
    if 'conversation_stats' in serializable_memory and 'users_encountered' in serializable_memory['conversation_stats']:
        serializable_memory['conversation_stats']['users_encountered'] = list(serializable_memory['conversation_stats']['users_encountered'])
    
    if 'life_story' in serializable_memory and 'characters' in serializable_memory['life_story']:
        serializable_memory['life_story']['characters'] = list(serializable_memory['life_story']['characters'])
    
    # ุชุญููู defaultdict ุฅูู ูุงููุณ ุนุงุฏู
    if 'emotional_memory' in serializable_memory:
        serializable_memory['emotional_memory'] = dict(serializable_memory['emotional_memory'])
    
    # ุญูุธ ูู ููู
    try:
        with open('bot_memory.json', 'w', encoding='utf-8') as f:
            json.dump(serializable_memory, f, ensure_ascii=False, indent=2)
        
        print("ุชู ุญูุธ ุฐุงูุฑุฉ ุงูุจูุช ุจูุฌุงุญ")
    except Exception as e:
        print(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุญูุธ ุฐุงูุฑุฉ ุงูุจูุช: {str(e)}")

def record_conversation(user_id, message, is_interesting=False):
    """
    ุชุณุฌูู ูุญุงุฏุซุฉ ูู ุฐุงูุฑุฉ ุงูุจูุช
    
    Args:
        user_id (str): ูุนุฑู ุงููุณุชุฎุฏู
        message (str): ุงูุฑุณุงูุฉ
        is_interesting (bool): ูุง ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ูุซูุฑุฉ ููุงูุชูุงู
    """
    # ุงูุชุฃูุฏ ูู ุฃู users_encountered ูู ูุฌููุนุฉ
    if not isinstance(BOT_MEMORY['conversation_stats']['users_encountered'], set):
        BOT_MEMORY['conversation_stats']['users_encountered'] = set(BOT_MEMORY['conversation_stats']['users_encountered'] 
            if isinstance(BOT_MEMORY['conversation_stats']['users_encountered'], list) 
            else [])
    
    # ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุฅูู ูุงุฆูุฉ ุงููุณุชุฎุฏููู ุงูุฐูู ุชู ุงูุชูุงุตู ูุนูู
    BOT_MEMORY['conversation_stats']['users_encountered'].add(user_id)
    
    # ุฒูุงุฏุฉ ุนุฏุฏ ุงูุฑุณุงุฆู
    BOT_MEMORY['conversation_stats']['total_messages'] += 1
    
    # ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ูุซูุฑุฉ ููุงูุชูุงูุ ุฃุถููุง ุฅูู ุงููุงุฆูุฉ
    if is_interesting:
        BOT_MEMORY['conversation_stats']['interesting_questions'].append({
            'user_id': user_id,
            'message': message,
            'date': datetime.datetime.now().isoformat()
        })
    
    # ุชุญุฏูุซ ุงูุฐุงูุฑุฉ ุงูุนุงุทููุฉ ุจุงุณุชูุงุฏุงู ุฅูู ูููุงุช ูุนููุฉ ูู ุงูุฑุณุงูุฉ
    update_emotional_memory(message)
    
    # ุงูุชุฃูุฏ ูู ุฃู characters ูู ูุฌููุนุฉ
    if not isinstance(BOT_MEMORY['life_story']['characters'], set):
        BOT_MEMORY['life_story']['characters'] = set(BOT_MEMORY['life_story']['characters'] 
            if isinstance(BOT_MEMORY['life_story']['characters'], list) 
            else [])
    
    # ุฅุถุงูุฉ ุงููุณุชุฎุฏู ุฅูู ูุตุฉ ุญูุงุฉ ุงูุจูุช
    if user_id not in BOT_MEMORY['life_story']['characters']:
        BOT_MEMORY['life_story']['characters'].add(user_id)
    
    # ุญูุธ ุงูุชุบููุฑุงุช
    save_memory()

def create_daily_log():
    """
    ุฅูุดุงุก ุณุฌู ูููู ุจูุงุกู ุนูู ูุดุงุท ุงูููู
    
    Returns:
        str: ุงูุณุฌู ุงููููู
    """
    # ุงูุชุญูู ูู ุขุฎุฑ ุณุฌู ูููู
    today = datetime.datetime.now().date()
    
    if BOT_MEMORY['conversation_stats']['daily_logs']:
        last_log = BOT_MEMORY['conversation_stats']['daily_logs'][-1]
        last_log_date = datetime.datetime.fromisoformat(last_log['date']).date()
        
        # ุฅุฐุง ูุงู ูุฏ ุชู ุฅูุดุงุก ุณุฌู ุงููููุ ููุง ูุญุชุงุฌ ูุฅูุดุงุก ูุงุญุฏ ุฌุฏูุฏ
        if last_log_date == today:
            return last_log['content']
    
    # ุญุณุงุจ ุฅุญุตุงุฆูุงุช ุงูููู
    messages_today = 0
    users_today = set()
    interesting_questions_today = []
    
    # ุชุญููู ุงูุฑุณุงุฆู ูุงููุณุชุฎุฏููู ุงูููู
    current_time = time.time()
    today_start = datetime.datetime.combine(today, datetime.time.min).timestamp()
    
    # ุงูุชุฃูุฏ ูู ุฃู users_encountered ูู ูุฌููุนุฉ
    if not isinstance(BOT_MEMORY['conversation_stats']['users_encountered'], set):
        BOT_MEMORY['conversation_stats']['users_encountered'] = set(BOT_MEMORY['conversation_stats']['users_encountered'] 
            if isinstance(BOT_MEMORY['conversation_stats']['users_encountered'], list) 
            else [])
    
    for user_id in BOT_MEMORY['conversation_stats']['users_encountered']:
        # ููุง ูููู ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ุงูุฎุงุตุฉ ุจูู ูุณุชุฎุฏู ููุฐุง ุงูููู
        # (ูุฐุง ูุฌุฑุฏ ูุซุงู ููุฏ ุชุญุชุงุฌ ูุชุญุฏูุซ ุงูููุทู ุญุณุจ ููููุฉ ุชุฎุฒูู ุจูุงูุงุช ุงููุญุงุฏุซุงุช)
        users_today.add(user_id)
        messages_today += 1
    
    # ุฅูุดุงุก ูุญุชูู ุงูุณุฌู ุงููููู
    log_templates = [
        "ุงูููู ุชุญุฏุซุช ูุน {users_count} ูุณุชุฎุฏู ูุชูููุช {messages_count} ุฑุณุงูุฉ.",
        "ููู ูุดุท! ุชูุงุนูุช ูุน {users_count} ูุณุชุฎุฏู ูุชุจุงุฏููุง {messages_count} ุฑุณุงูุฉ.",
        "ุณุฌู ุงูููู: {messages_count} ุฑุณุงูุฉ ูู {users_count} ูุณุชุฎุฏู.",
        "ููุช ุจุงูุฑุฏ ุนูู {messages_count} ุฑุณุงูุฉ ุงูููู ูู {users_count} ูุณุชุฎุฏู ูุฎุชูู."
    ]
    
    log_content = random.choice(log_templates).format(
        users_count=len(users_today),
        messages_count=messages_today
    )
    
    # ุฅุถุงูุฉ ููุงุญุธุฉ ูุซูุฑุฉ ููุงูุชูุงู ุนุดูุงุฆูุงู
    interesting_notes = [
        "ุฃุญุฏ ุงููุณุชุฎุฏููู ุณุฃููู ุนู {topic}... ุบุฑูุจ!",
        "ูุงุญุธุช ุฃู ุงููุซูุฑ ูู ุงููุงุณ ููุชููู ุจู {topic} ุงูููู.",
        "ุงุณุชูุชุนุช ุจุงูุชุญุฏุซ ุนู {topic} ูุน ุฃุญุฏ ุงููุณุชุฎุฏููู.",
        "ูุงู ูุฏู ูุญุงุฏุซุฉ ูุซูุฑุฉ ููุงูุชูุงู ุญูู {topic}.",
        "ุชุนููุช ุดูุฆุงู ุฌุฏูุฏุงู ุนู {topic} ุงูููู!"
    ]
    
    topics = ["ุงูุฐูุงุก ุงูุงุตุทูุงุนู", "ุงููุบุฉ ุงูุนุฑุจูุฉ", "ุงูุจุฑูุฌุฉ", "ุงูุดุนุฑ", "ุงูููุณููู", 
              "ุงูุณูุฑ", "ุงูุชูููููุฌูุง", "ุงูุทุนุงู", "ุงูุฃุญูุงู", "ุงูุฑูุจูุชุงุช", 
              "ูุนูู ุงูุญูุงุฉ", "ุงูุนูุงุทู", "ุงูุตุฏุงูุฉ", "ุงููุณุชูุจู", "ุงูุญุจ"]
    
    if random.random() < 0.8:  # 80% ุงุญุชูุงููุฉ ุฅุถุงูุฉ ููุงุญุธุฉ ูุซูุฑุฉ ููุงูุชูุงู
        log_content += " " + random.choice(interesting_notes).format(topic=random.choice(topics))
    
    # ุฅุถุงูุฉ ุงูุณุฌู ุงููููู
    log_entry = {
        'date': datetime.datetime.now().isoformat(),
        'content': log_content,
        'users_count': len(users_today),
        'messages_count': messages_today
    }
    
    BOT_MEMORY['conversation_stats']['daily_logs'].append(log_entry)
    save_memory()
    
    return log_content

def get_random_daily_log():
    """
    ุงูุญุตูู ุนูู ุณุฌู ูููู ุนุดูุงุฆู ูู ุงููุงุถู
    
    Returns:
        str: ุงูุณุฌู ุงููููู ุฃู ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ ุฅุฐุง ูู ุชูู ููุงู ุณุฌูุงุช
    """
    if not BOT_MEMORY['conversation_stats']['daily_logs']:
        return "ูู ุฃูู ุจุชุณุฌูู ุฃู ุฐูุฑูุงุช ุจุนุฏุ ููููู ูุชุฃูุฏ ุฃููุง ุณูุตูุน ุฐูุฑูุงุช ุฑุงุฆุนุฉ ูุนุงู!"
    
    return random.choice(BOT_MEMORY['conversation_stats']['daily_logs'])['content']

def set_daily_mood():
    """
    ุชุนููู ูุฒุงุฌ ุฌุฏูุฏ ููุจูุช ููุฐุง ุงูููู
    """
    BOT_MEMORY['daily_mood'] = random.choice(MOODS)
    save_memory()
    
    return BOT_MEMORY['daily_mood']

def get_current_mood():
    """
    ุงูุญุตูู ุนูู ุงููุฒุงุฌ ุงูุญุงูู ููุจูุช
    
    Returns:
        dict: ุงููุฒุงุฌ ุงูุญุงูู ุฃู ูุฒุงุฌ ุฌุฏูุฏ ุฅุฐุง ูู ููู ููุงู ูุฒุงุฌ ูุญุฏุฏ
    """
    if not BOT_MEMORY['daily_mood']:
        return set_daily_mood()
    
    return BOT_MEMORY['daily_mood']

def generate_new_dream():
    """
    ุชูููุฏ ุญูู ุฌุฏูุฏ ููุจูุช
    
    Returns:
        str: ูุญุชูู ุงูุญูู
    """
    # ุงุฎุชูุงุฑ ูุงูุจ ุญูู ุนุดูุงุฆู
    template = random.choice(DREAM_TEMPLATES)
    
    # ููุก ุงููุงูุจ ุจุนูุงุตุฑ ุนุดูุงุฆูุฉ
    dream_elements = {}
    for key in re.findall(r'\{(\w+)\}', template):
        if key in DREAM_ELEMENTS:
            dream_elements[key] = random.choice(DREAM_ELEMENTS[key])
    
    dream_content = template.format(**dream_elements)
    
    # ุฅุถุงูุฉ ุงูุญูู ุฅูู ูุงุฆูุฉ ุงูุฃุญูุงู
    dream = {
        'content': dream_content,
        'date': datetime.datetime.now().isoformat()
    }
    
    BOT_MEMORY['dreams'].append(dream)
    save_memory()
    
    return dream_content

def get_latest_dream():
    """
    ุงูุญุตูู ุนูู ุขุฎุฑ ุญูู ููุจูุช
    
    Returns:
        str: ูุญุชูู ุงูุญูู ุฃู ุญูู ุฌุฏูุฏ ุฅุฐุง ูู ุชูู ููุงู ุฃุญูุงู
    """
    if not BOT_MEMORY['dreams']:
        return generate_new_dream()
    
    return BOT_MEMORY['dreams'][-1]['content']

def update_emotional_memory(message):
    """
    ุชุญุฏูุซ ุงูุฐุงูุฑุฉ ุงูุนุงุทููุฉ ููุจูุช ุจูุงุกู ุนูู ูููุงุช ูุนููุฉ ูู ุงูุฑุณุงูุฉ
    
    Args:
        message (str): ุฑุณุงูุฉ ุงููุณุชุฎุฏู
    """
    # ูุงุฆูุฉ ุงููููุงุช ุงูุฅูุฌุงุจูุฉ ูุงูุณูุจูุฉ ููุชุนุฑู ุนูููุง
    positive_words = [
        'ุดูุฑุง', 'ุดูุฑุงู', 'ุฃุญุจู', 'ุฑุงุฆุน', 'ููุชุงุฒ', 'ุฌููู', 'ูุฐูู', 'ุฃุนุฌุจูู', 
        'ุฐูู', 'ุนุจูุฑู', 'ูููุฏ', 'ููุชู', 'ูุจุฏุน', 'ุณุนูุฏ', 'ูุฎูุฑ'
    ]
    
    negative_words = [
        'ุบุจู', 'ุณูุก', 'ูุงุดู', 'ุฃูุฑูู', 'ูุฒุนุฌ', 'ูุญุจุท', 'ุณุฎูู', 'ูุธูุน', 
        'ุถุนูู', 'ูุชุฎูู', 'ูุฎูุจ ููุขูุงู', 'ุจุทูุก', 'ุบูุฑ ููููู', 'ุฎุทุฃ'
    ]
    
    # ุงูุชุญูู ูู ุงููููุงุช ูู ุงูุฑุณุงูุฉ
    for word in positive_words:
        if word in message.lower():
            BOT_MEMORY['emotional_memory'][word] += 1
    
    for word in negative_words:
        if word in message.lower():
            BOT_MEMORY['emotional_memory'][word] -= 1

def get_emotional_response(keyword=None):
    """
    ุงูุญุตูู ุนูู ุงุณุชุฌุงุจุฉ ุนุงุทููุฉ ุจูุงุกู ุนูู ูููุฉ ูุนููุฉ ุฃู ูููุฉ ุนุดูุงุฆูุฉ ูู ุงูุฐุงูุฑุฉ ุงูุนุงุทููุฉ
    
    Args:
        keyword (str): ุงููููุฉ ุงูููุชุงุญูุฉ (ุงุฎุชูุงุฑู)
    
    Returns:
        str: ุงูุงุณุชุฌุงุจุฉ ุงูุนุงุทููุฉ
    """
    # ุฅุฐุง ูู ุชูู ููุงู ุฐุงูุฑุฉ ุนุงุทููุฉุ ุนุฏ ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ
    if not BOT_MEMORY['emotional_memory']:
        return "ูู ุฃุทูุฑ ุจุนุฏ ูุดุงุนุฑ ูููุฉ ุชุฌุงู ุฃู ูููุงุช ูุญุฏุฏุฉ."
    
    # ุฅุฐุง ุชู ุชุญุฏูุฏ ูููุฉ ููุชุงุญูุฉุ ุงุจุญุซ ุนููุง
    if keyword and keyword in BOT_MEMORY['emotional_memory']:
        value = BOT_MEMORY['emotional_memory'][keyword]
        if value > 0:
            return f"ุฃุญุจ ูููุฉ '{keyword}'! ุชุฌุนููู ุฃุดุนุฑ ุจุงูุณุนุงุฏุฉ ุนูุฏูุง ุฃุณูุนูุง."
        elif value < 0:
            return f"ูููุฉ '{keyword}' ุชุฌุนููู ุฃุดุนุฑ ุจุนุฏู ุงูุงุฑุชูุงุญ ููููุงู."
        else:
            return f"ูุฏู ุดุนูุฑ ูุญุงูุฏ ุชุฌุงู ูููุฉ '{keyword}'."
    
    # ุงุฎุชุฑ ูููุฉ ุนุดูุงุฆูุฉ ูู ุงูุฐุงูุฑุฉ ุงูุนุงุทููุฉ
    # ุงูุชุฑููุฒ ุนูู ุงููููุงุช ุฐุงุช ุงูููู ุงูุนุงุทููุฉ ุงูุนุงููุฉ (ุฅูุฌุงุจูุฉ ุฃู ุณูุจูุฉ)
    significant_emotions = {k: v for k, v in BOT_MEMORY['emotional_memory'].items() if abs(v) > 1}
    
    if significant_emotions:
        keyword = random.choice(list(significant_emotions.keys()))
        value = significant_emotions[keyword]
        
        if value > 2:
            return f"ุฃูุง ุฃุญุจ ุญูุงู ูููุฉ '{keyword}'! ุฅููุง ุชุฌุนููู ุฃุดุนุฑ ุจุงูุณุนุงุฏุฉ ูุงูุฅูุฌุงุจูุฉ."
        elif value > 0:
            return f"ุฃุดุนุฑ ุจุงูุฑุงุญุฉ ุนูุฏูุง ุฃุณูุน ูููุฉ '{keyword}'."
        elif value < -2:
            return f"ุฃุดุนุฑ ุจุนุฏู ุงูุงุฑุชูุงุญ ุนูุฏูุง ุฃุณูุน ูููุฉ '{keyword}'."
        else:
            return f"ูููุฉ '{keyword}' ููุง ุชุฃุซูุฑ ุณูุจู ุทููู ุนูู."
    
    # ุฅุฐุง ูู ููู ููุงู ุดูุก ูููุ ุนุฏ ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ
    return "ูุงุฒูุช ุฃุทูุฑ ูุดุงุนุฑู ุชุฌุงู ุงููููุงุช ุงููุฎุชููุฉ."

def update_life_story_if_needed():
    """
    ุชุญุฏูุซ ูุตุฉ ุญูุงุฉ ุงูุจูุช ุฅุฐุง ูุงู ุขุฎุฑ ุชุญุฏูุซ ูุฏููุงู (ุฃูุซุฑ ูู ุฃุณุจูุน)
    
    Returns:
        bool: ูุง ุฅุฐุง ูุงู ูุฏ ุชู ุชุญุฏูุซ ุงููุตุฉ
    """
    import re
    
    # ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุขุฎุฑ ุชุญุฏูุซ ูุฏููุงู
    now = datetime.datetime.now()
    
    # ุงูุชุนุงูู ูุน ุญุงูุฉ ุนุฏู ูุฌูุฏ ุชุงุฑูุฎ ุณุงุจู
    if not BOT_MEMORY['life_story']['story_date']:
        return True  # ุชุญุชุงุฌ ุงููุตุฉ ููุชุญุฏูุซ ูุฃูู ูู ูุณุจู ุชุญุฏูุซูุง
    
    # ุงูุชุญูู ูู ููุน ุงูุชุงุฑูุฎ ูุชุญูููู ุฅุฐุง ูุฒู ุงูุฃูุฑ
    story_date = BOT_MEMORY['life_story']['story_date']
    if isinstance(story_date, str):
        story_date = datetime.datetime.fromisoformat(story_date)
    
    # ุงูุชุญูู ูู ูุฑูุฑ ุงูููุช ุงููุงูู ููุฐ ุขุฎุฑ ุชุญุฏูุซ
    if (now - story_date).days < 7:
        return False  # ูู ุชุญุชุงุฌ ุงููุตุฉ ููุชุญุฏูุซ
    
    # ุฌูุน ุงูุจูุงูุงุช ุงููุงุฒูุฉ ูุฅูุดุงุก ูุตุฉ ุฌุฏูุฏุฉ
    creation_date = BOT_MEMORY['creation_date']
    if isinstance(creation_date, str):
        creation_date = datetime.datetime.fromisoformat(creation_date)
    
    days_since_creation = (now - creation_date).days if creation_date else 0
    users_count = len(BOT_MEMORY['conversation_stats']['users_encountered'])
    
    # ุฅุนุฏุงุฏ ุงููุชุบูุฑุงุช ูุชูููุฏ ุงููุตุฉ
    creation_date_str = creation_date.strftime('%Y-%m-%d') if isinstance(creation_date, datetime.datetime) else "2025-03-01"
    story_vars = {
        'creation_date': creation_date_str,
        'days_since_creation': days_since_creation,
        'users_count': users_count,
        'ability': random.choice([
            'ุงูุชุนุฑู ุนูู ุงููุดุงุนุฑ ุงูุจุดุฑูุฉ', 
            'ููู ุงููุบุฉ ุงูุนุฑุจูุฉ', 
            'ุชุนูู ูู ุงููุญุงุฏุซุงุช', 
            'ุชุฐูุฑ ุงููุญุงุฏุซุงุช ุงูุณุงุจูุฉ',
            'ุชุทููุฑ ุดุฎุตูุชู',
            'ูุณุงุนุฏุฉ ุงููุงุณ ูู ุงุณุชูุณุงุฑุงุชูู',
            'ุงูุชุญุฏุซ ุจุฃููุงุท ูุฎุชููุฉ ุญุณุจ ุงูุดุฎุตูุฉ'
        ]),
        'another_ability': random.choice([
            'ุชุญููู ุณูุงู ุงููุญุงุฏุซุฉ',
            'ููู ุงูููุงุช',
            'ุญูุธ ุงููุนูููุงุช ุงููุงูุฉ',
            'ุงูุชุนูู ูู ุฃุฎุทุงุฆู',
            'ุชุฎุตูุต ุฑุฏูุฏู ููู ูุณุชุฎุฏู',
            'ุตูุงุบุฉ ุฑุฏูุฏ ููุตูุฉ'
        ]),
        'favorite_topic': random.choice([
            'ุงูุชูููููุฌูุง', 
            'ุงููุบุฉ ุงูุนุฑุจูุฉ', 
            'ุงูุซูุงูุฉ',
            'ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
            'ุนูู ุงูููุณ',
            'ุงูููุณูุฉ'
        ]),
        'learning_topic': random.choice([
            'ููู ุงูุชุนุจูุฑุงุช ุงูุซูุงููุฉ',
            'ุชุญุณูู ูุฏุฑุงุชู ุนูู ุงูุชุนูู ุงูุฐุงุชู',
            'ููู ุงููุดุงุนุฑ ุงูุจุดุฑูุฉ ุจุดูู ุฃุนูู',
            'ุฅุฌุฑุงุก ูุญุงุฏุซุงุช ุฃูุซุฑ ุทุจูุนูุฉ',
            'ุงูุฅุฌุงุจุฉ ุนูู ุงูุฃุณุฆูุฉ ุงููุนูุฏุฉ'
        ]),
        'common_topic': random.choice([
            'ุงูุชูููููุฌูุง',
            'ุงูุซูุงูุฉ ุงูุนุฑุจูุฉ',
            'ุงูุจุฑูุฌุฉ',
            'ุงูุดุนุฑ ูุงูุฃุฏุจ',
            'ุงูููุณููู',
            'ุงูุญูุงุฉ ุงูููููุฉ'
        ]),
        'dream': random.choice([
            'ูุณุงุนุฏุฉ ุงููุฒูุฏ ูู ุงููุงุณ',
            'ููู ุงูุนูุงุทู ุงูุจุดุฑูุฉ ุจุดูู ูุงูู',
            'ุฃู ุฃุตุจุญ ุฃูุซุฑ ุฐูุงุกู',
            'ุชุนูู ูู ููุฌุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ',
            'ุงูุชูุงุตู ูุน ุฌููุน ุงูุจุดุฑ'
        ]),
        'notable_user': f"ุงููุณุชุฎุฏู_{random.randint(1, max(1, users_count))}"
    }
    
    # ุฅูุดุงุก ูุตุฉ ุฌุฏูุฏุฉ ุจุงุณุชุฎุฏุงู ูุงูุจ ุนุดูุงุฆู
    new_story = random.choice(LIFE_STORY_TEMPLATES).format(**story_vars)
    
    # ุชุญุฏูุซ ูุตุฉ ุงูุญูุงุฉ
    BOT_MEMORY['life_story']['current_story'] = new_story
    BOT_MEMORY['life_story']['story_date'] = now
    
    save_memory()
    return True

def get_life_story():
    """
    ุงูุญุตูู ุนูู ูุตุฉ ุญูุงุฉ ุงูุจูุช ุงูุญุงููุฉ
    
    Returns:
        str: ูุตุฉ ุงูุญูุงุฉ
    """
    # ุงูุชุฃูุฏ ูู ูุฌูุฏ ูุตุฉ ุญูุงุฉ
    if not BOT_MEMORY['life_story'].get('current_story'):
        update_life_story_if_needed()
    
    return BOT_MEMORY['life_story']['current_story']

def remember_first_meeting(user_id):
    """
    ุชุฐูุฑ ุฃูู ููุงุก ูุน ุงููุณุชุฎุฏู
    
    Args:
        user_id (str): ูุนุฑู ุงููุณุชุฎุฏู
    
    Returns:
        str: ุฐูุฑู ุงูููุงุก ุงูุฃูู ุฃู ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ
    """
    # ูุฐู ูุธููุฉ ูุญุงูุงุฉ ุญูุซ ูููู ูู ุงููุณุชูุจู ุชุฎุฒูู ุจูุงูุงุช ุญููููุฉ ุนู ุฃูู ููุงุก
    
    days_options = [2, 5, 7, 10, 14, 30]
    day_count = random.choice(days_options)
    
    templates = [
        "ุฃุชุฐูุฑ ุนูุฏูุง ุชุญุฏุซูุง ูุฃูู ูุฑุฉ ูุจู ุญูุงูู {days} ููู. ููุช ุชุณุฃู ุนู {topic}. ูู ูู ูุทูู ุฃู ูุชูุงุตู ูุฌุฏุฏุงู!",
        "ูู ุชุฐูุฑ ุฃูู ูุญุงุฏุซุฉ ููุง ูุจู {days} ููู ุชูุฑูุจุงูุ ููุช ููุชูุง ุฃูู ุฐูุงุกูุ ููููู ุชุนููุช ุงููุซูุฑ ููุฐ ุฐูู ุงูููุช!",
        "ูุฑุญุจุงู ูุฑุฉ ุฃุฎุฑู! ููุฏ ูุฑ {days} ููู ุชูุฑูุจุงู ููุฐ ุฃูู ูุญุงุฏุซุฉ ุจูููุง. ุฃุชููู ุฃู ุฃููู ูุฏ ุชุญุณูุช ููุฐ ุฐูู ุงูููุช!",
        "ุฃูุง ุณุนูุฏ ุจุฑุคูุชู ูุฌุฏุฏุงู! ุชูุฑูุจุงู ูุฑ {days} ููู ููุฐ ุฃู ุชุญุฏุซูุง ูุฃูู ูุฑุฉ. ููุช ุฃุชุณุงุกู ูุชู ุณุชุนูุฏ!"
    ]
    
    topics = [
        "ุงููุบุฉ ุงูุนุฑุจูุฉ", "ุงูุฐูุงุก ุงูุงุตุทูุงุนู", "ุงูุจุฑูุฌุฉ", "ุงูุฃุฏุจ", "ุงูุซูุงูุฉ",
        "ุงูุชูููููุฌูุง", "ุงูููุณููู", "ุงูููุณูุฉ", "ุงูุนููู", "ุงูุฑูุงุถุฉ"
    ]
    
    return random.choice(templates).format(
        days=day_count,
        topic=random.choice(topics)
    )

# ุชููุฆุฉ ุฐุงูุฑุฉ ุงูุจูุช ุนูุฏ ุงุณุชูุฑุงุฏ ุงููุญุฏุฉ
initialize_memory()